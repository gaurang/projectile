<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">
	
	<!-- CONFIGURATION File import -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:appConfig.properties</value>
		</property>
	</bean>


	<!-- Begin DATABASE PART -->
	<!-- ========================================================  -->
	<!-- ========================================================  -->
	<!-- DataSource for TAG system -->

	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${jdbc.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.url}</value>
		</property>
		<property name="user">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="acquireIncrement">
			<value>10</value>
		</property>
		<property name="initialPoolSize">
			<value>10</value>
		</property>
		<property name="minPoolSize">
			<value>10</value>
		</property>
		<property name="maxPoolSize">
			<value>15</value>
		</property>
		<property name="testConnectionOnCheckout">
			<value>true</value>
		</property>
		<property name="testConnectionOnCheckin">
			<value>false</value>
		</property>
		<property name="acquireRetryAttempts">
			<value>60</value>
		</property>
		<property name="acquireRetryDelay">
			<value>2000</value>
		</property>
		<property name="breakAfterAcquireFailure">
			<value>false</value>
		</property>
	</bean>


	<bean id="dataSource_slave"
		class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${jdbc2.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc2.url}</value>
		</property>
		<property name="user">
			<value>${jdbc2.username}</value>
		</property>
		<property name="password">
			<value>${jdbc2.password}</value>
		</property>
		<property name="acquireIncrement">
			<value>10</value>
		</property>
		<property name="initialPoolSize">
			<value>10</value>
		</property>
		<property name="minPoolSize">
			<value>10</value>
		</property>
		<property name="maxPoolSize">
			<value>15</value>
		</property>
		<property name="testConnectionOnCheckout">
			<value>true</value>
		</property>
		<property name="testConnectionOnCheckin">
			<value>false</value>
		</property>
		<property name="acquireRetryAttempts">
			<value>60</value>
		</property>
		<property name="acquireRetryDelay">
			<value>2000</value>
		</property>
		<property name="breakAfterAcquireFailure">
			<value>false</value>
		</property>
	</bean>


	<!-- Transaction Manager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- Transaction Proxy -->
	<bean id="txProxyTemplate" abstract="true"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="get*">PROPAGATION_REQUIRED</prop>
				<prop key="set*">PROPAGATION_REQUIRED</prop>
				<prop key="r*">PROPAGATION_REQUIRED</prop>
				<prop key="merchant*">PROPAGATION_REQUIRED</prop>
				<prop key="d*">PROPAGATION_REQUIRED</prop>
				<prop key="a*">PROPAGATION_REQUIRED</prop>
				<prop key="c*">PROPAGATION_REQUIRED</prop>
				<prop key="login">PROPAGATION_REQUIRED</prop>

			</props>
		</property>
	</bean>

	<!-- JDBC template from Spring -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<bean id="jdbcSlaveTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource_slave" />
		</property>
	</bean>

	<!-- DAO that wraps JDBC template -->
	
	<bean id="jdbcDao" class="com.basync.b2b.dao.JdbcDao">
		<property name="jdbcTemplate">
			<ref bean="jdbcTemplate" />
		</property>
	</bean>

	<bean id="jdbcSlaveDao"
		class="com.basync.b2b.dao.JdbcSlaveDao">
		<property name="jdbcTemplate">
			<ref bean="jdbcSlaveTemplate" />
		</property>
	</bean>
 
	<!-- ========================================================  -->
	<!-- ========================================================  -->
	<!-- End of DATABASE PART -->



	<!-- Begin SERVICE PART -->
	<!-- ========================================================  -->
	<!-- ========================================================  -->
	<bean id="openSessionInViewInterceptor" class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<property name="singleSession" value="true"/>
		<property name="flushModeName">
			<value>FLUSH_AUTO</value>
		</property>
		
	</bean> 
	 <bean id="sessionFactory" 
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		 
		    <property name="dataSource">
		      <ref bean="dataSource"/>
		    </property>
	 
			 <property name="hibernateProperties">
		       <props>
		         <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
		         <prop key="hibernate.show_sql">true</prop>
		       </props>
		    </property>
		 
		    <property name="annotatedClasses">
			<list>
				<value>com.basync.b2b.crm.data.PartyMasterData</value>
				<value>com.basync.b2b.crm.data.PartyAddMaster</value>
				<value>com.basync.b2b.crm.data.PartyShipAdd</value>
				<value>com.basync.b2b.crm.data.PartyAccData</value>
				<value>com.basync.b2b.dataobjects.StockMasterDO</value>
				<value>com.basync.b2b.dataobjects.StockPRPDO</value>
				
				<value>com.basync.b2b.dataobjects.TermMaster</value>
				<value>com.basync.b2b.crm.data.PurchaseMaster</value>
				<value>com.basync.b2b.crm.data.PurchaseDetails</value>
				
				<value>com.basync.b2b.crm.data.PaymentDetails</value>
				<value>com.basync.b2b.crm.data.Payment</value>
				<value>com.basync.b2b.crm.data.InvoiceMaster</value>
				<value>com.basync.b2b.crm.data.InvoiceDetail</value>
				<value>com.basync.b2b.crm.data.ParcelMaster</value>
                <value>com.basync.b2b.dataobjects.PriceMasterPrpDO</value>
			</list>
		    </property>
	 </bean>
	
	
	<!-- Base service for all services -->
	<bean id="baseService"
		class="com.basync.b2b.service.impl.BaseService">
		<property name="jdbcDao">
			<ref bean="jdbcDao" />
		</property>
		<property name="jdbcSlaveDao">
			<ref bean="jdbcSlaveDao" />
		</property>
		<property name="cacheInterceptor">
			<ref bean="cacheInterceptor" />
		</property>
		
	</bean>



	<!-- All Common related service  start-->
	<bean id="commonServiceBean"
		class="com.basync.b2b.service.impl.CommonServiceImpl" parent="baseService">
	</bean>
	
	<bean id="prpServiceBean" 
		class="com.basync.b2b.service.impl.PrpServiceImpl" parent="baseService">
	</bean>
	
	<bean id="stockServiceBean" 
		class="com.basync.b2b.service.impl.StockServiceImpl" parent="baseService">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<property name="priceService">
			<ref bean="priceServiceBean" />
		</property>
		<property name="memoService">
			<ref bean="memoServiceBean" />
		</property>
	</bean>
	<bean id="userServiceBean" 
		class="com.basync.b2b.service.impl.UserServiceImpl" parent="baseService">
		
	</bean>
	<!-- End Of All Common related service  -->
	
	
	<!--ALL CRM services start-->
	<bean id="genericServiceBean" 
		class="com.basync.b2b.crm.service.impl.GenericServiceImpl" parent="baseService">
	</bean>
	<bean id="priceServiceBean" 
		class="com.basync.b2b.crm.service.impl.PriceServiceImpl" parent="baseService">
	</bean>
	<bean id="memoServiceBean" 
		class="com.basync.b2b.crm.service.impl.MemoServiceImpl" parent="baseService">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<property name="genericService">
			<ref bean="genericServiceBean" />
		</property>
	</bean>
	<bean id="partyServiceBean" 
		class="com.basync.b2b.crm.service.impl.PartyServiceImpl" parent="baseService">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>
	<bean id="repServiceBean" 
		class="com.basync.b2b.crm.service.impl.RepServiceImpl" parent="baseService">
	</bean>
	<!--ALL CRM services end-->
	
	
	
	<!-- OSCache Start -->
	<!-- ========================================================  -->
	<!-- ========================================================  -->
	<!-- An interceptor that implements caching of the results of a method. -->
	<bean id="cacheInterceptor"
		class="com.basync.b2b.cache.OSCacheInterceptor">
		<!-- For caches not defined under 'refreshPeriods', use this value -->
		<property name="defaultRefreshPeriod">
			<value>3600</value>
		</property>
	</bean>

	<!-- An advisor that wraps get*() method with the cacheInterceptor -->
	<bean id="cacheAdvisor"
		class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<property name="advice">
			<ref bean="cacheInterceptor" />
		</property>
		<property name="patterns">
			<list>
				<value>.*get.*</value>
			</list>
		</property>
	</bean>

	<bean id="cacheProxyCreator"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>commonServiceBean</value>
				<!-- 
					<value>affiliateServiceImpl</value>
					<value>networkAdministrationServiceImpl</value>
				-->
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>cacheAdvisor</value>
			</list>
		</property>
	</bean>
	<!-- ========================================================  -->
	<!-- ========================================================  -->
	<!-- OSCache End -->

	<!-- ========================================================  -->
	<!-- ========================================================  -->
	
	
	<bean id="mailProducer"
		class="com.basync.b2b.mail.MailSenderPooled"
		destroy-method="close">
		<property name="mailSender">
			<ref bean="javaMailSender" />
		</property>
		<property name="adminemail">
			<value>${b2b.admin.email}</value>
		</property>
		<property name="commonService">
			<ref bean="commonServiceBean" />
		</property>
	</bean>
	
	<bean id="javaMailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host">
			<value>${b2b.mail.server}</value>
		</property>

		<property name="port">
			<value>${b2b.mail.server.port}</value>
		</property>
		
		<property name="username">
			<value>${b2b.admin.email.username}</value>
		</property>

		<property name="password">
			<value>${b2b.admin.email.password}</value>
		</property>

		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
       	        <prop key="mail.smtp.starttls.enable">true</prop>
			</props>
			
		</property>

	</bean>
	<!-- JCaptcha Start -->
	<!--  
		<bean id="captchaEngine"
		class="com.octo.captcha.engine.image.gimpy.NonLinearTextGimpyEngine" />
		<bean id="captchaService"
		class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService"
		singleton="true">
		<property name="captchaEngine" ref="imageEngine" />
		</bean>
	-->

	<bean id="captchaService"
		class="com.octo.captcha.service.multitype.GenericManageableCaptchaService">
		<constructor-arg index="0">
			<ref bean="imageEngine" />
		</constructor-arg>
		<constructor-arg index="1">
			<value>180</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>180000</value>
		</constructor-arg>
		<constructor-arg index="3">
			<value>135000</value>
		</constructor-arg>
	</bean>

	<bean id="imageEngine"
		class="com.octo.captcha.engine.GenericCaptchaEngine">
		<constructor-arg index="0">
			<list>
				<ref bean="captchaFactory" />
			</list>
		</constructor-arg>
	</bean>

	<bean id="captchaFactory"
		class="com.octo.captcha.image.gimpy.GimpyFactory">
		<constructor-arg>
			<ref bean="wordgen" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="wordtoimage" />
		</constructor-arg>
	</bean>

	<bean id="wordgen"
		class="com.octo.captcha.component.word.wordgenerator.RandomWordGenerator">
		<constructor-arg>
			<value>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890</value>
		</constructor-arg>
	</bean>


	<bean id="wordtoimage"
		class="com.octo.captcha.component.image.wordtoimage.ComposedWordToImage">
		<constructor-arg index="0">
			<ref bean="fontGenRandom" />
		</constructor-arg>
		<constructor-arg index="1">
			<ref bean="backGenUni" />
		</constructor-arg>
		<!--<constructor-arg index="2">
			<ref bean="simpleWhitePaster" />
		</constructor-arg>-->
		<constructor-arg index="2">
			<ref bean="simpleColoredPaster" />
		</constructor-arg>
	</bean>

	<bean id="fontGenRandom"
		class="com.octo.captcha.component.image.fontgenerator.RandomFontGenerator">
		<constructor-arg index="0">
			<value>40</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>50</value>
		</constructor-arg>
		<constructor-arg index="2">
			<list>
				<ref bean="fontArial" />
				<ref bean="fontTahoma"/>
				<ref bean="fontVerdana"/>
				<ref bean="fontComic"/>
				<ref bean="fontLucida"/>

			</list>
		</constructor-arg>
	</bean>

	<bean id="backGenUni"
		class="com.octo.captcha.component.image.backgroundgenerator.UniColorBackgroundGenerator">
		<constructor-arg type="java.lang.Integer" index="0">
			<value>200</value>
		</constructor-arg>
		<constructor-arg type="java.lang.Integer" index="1">
			<value>75</value>
		</constructor-arg>
		<constructor-arg type="java.awt.Color" index="2">
			<ref bean="colorWhite" />
		</constructor-arg>
	</bean>

	<bean id="simpleWhitePaster"
		class="com.octo.captcha.component.image.textpaster.SimpleTextPaster">
		<constructor-arg type="java.lang.Integer" index="0">
			<value>5</value>
		</constructor-arg>
		<constructor-arg type="java.lang.Integer" index="1">
			<value>7</value>
		</constructor-arg>
		<constructor-arg type="java.awt.Color" index="2">
			<ref bean="colorBlack" />
		</constructor-arg>
	</bean>
	
	<!-- Constructs the paster component, a baffle one, which make holes in characters
			Parameters :
		int for the min length of the word
		int for the max length of the word
		ColorGenerator for the color of the word
		boolean to know if each character can have a different color
		-->
	<bean id="simpleColoredPaster" class="com.octo.captcha.component.image.textpaster.RandomTextPaster" >
		<constructor-arg type="java.lang.Integer" index="0"><value>5</value></constructor-arg>
		<constructor-arg type="java.lang.Integer" index="1"><value>7</value></constructor-arg>
		<constructor-arg type="com.octo.captcha.component.image.color.ColorGenerator" index="2">
			<ref bean="colorGenRandomDark"/>
		</constructor-arg>
		<constructor-arg index="3"><value>true</value></constructor-arg>
	</bean>
	
	
	<bean id="fontArial" class="java.awt.Font">
		<constructor-arg index="0"><value>Arial</value></constructor-arg>
		<constructor-arg index="1"><value>0</value></constructor-arg>
		<constructor-arg index="2"><value>10</value></constructor-arg>
	</bean>
	
	<bean id="fontTahoma" class="java.awt.Font" >
		<constructor-arg index="0"><value>Tahoma</value></constructor-arg>
		<constructor-arg index="1"><value>0</value></constructor-arg>
		<constructor-arg index="2"><value>10</value></constructor-arg>
	</bean>

	<bean id="fontVerdana" class="java.awt.Font" >
		<constructor-arg index="0"><value>Verdana</value></constructor-arg>
		<constructor-arg index="1"><value>0</value></constructor-arg>
		<constructor-arg index="2"><value>10</value></constructor-arg>
	</bean>

	<bean id="fontComic" class="java.awt.Font" >
		<constructor-arg index="0"><value>Comic sans MS</value></constructor-arg>
		<constructor-arg index="1"><value>0</value></constructor-arg>
		<constructor-arg index="2"><value>10</value></constructor-arg>
	</bean>

	<bean id="fontLucida" class="java.awt.Font" >
		<constructor-arg index="0"><value>Lucida console</value></constructor-arg>
		<constructor-arg index="1"><value>0</value></constructor-arg>
		<constructor-arg index="2"><value>10</value></constructor-arg>
	</bean>

	<bean id="colorBlack" class="java.awt.Color">
		<constructor-arg index="0">
			<value>0</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>0</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>0</value>
		</constructor-arg>
	</bean>
	
	<bean id="colorWhite" class="java.awt.Color">
		<!--
		<constructor-arg index="0">
			<value>255</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>255</value>
		</constructor-arg>
		<constructor-arg index="2">
			<value>255</value>
		</constructor-arg>
		-->
		<constructor-arg index="0">
			<value>-1</value>
		</constructor-arg>
	</bean>
	
	<!-- Constructs a color generator which generate one color -->
	<bean id="colorGenWhite" class="com.octo.captcha.component.image.color.SingleColorGenerator" >
		<constructor-arg index="0"><ref bean="colorWhite"/></constructor-arg>
	</bean>

	<!-- Constructs a color generator which generate dark color correspond to the different ranges-->
	<bean id="colorGenRandomDark" class="com.octo.captcha.component.image.color.RandomRangeColorGenerator" >
		<constructor-arg index="0">
			<list>
                <value>0</value>
                <value>150</value>
           	</list>
           </constructor-arg>
		<constructor-arg index="1">
			<list>
                <value>0</value>
                <value>150</value>
           	</list>
           </constructor-arg>
		<constructor-arg index="2">
			<list>
                <value>0</value>
                <value>150</value>
           	</list>
           </constructor-arg>
		<constructor-arg index="3">
			<list>
                <value>255</value>
                <value>255</value>
           	</list>
           </constructor-arg>
	</bean>
	
	<!-- JCaptcha End -->
	
	<!-- this MessageSource is being used in a web application -->
	<!--<bean id="messageSource" 
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages"/>
	</bean>-->
	
	<bean id="messageSource" 
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" >
			<value>classpath:messages</value>
		</property>
		<property name="defaultEncoding">
			<value>UTF-8</value>
		</property>
		<property name="cacheSeconds">
			<value>-1</value>
		</property>
		<property name="fallbackToSystemLocale">
			<value>false</value>
		</property>		
	</bean>
    
    <bean id="themeSource"
          class="org.springframework.ui.context.support.ResourceBundleThemeSource">
        <property name="basenamePrefix">
        	<value>theme_</value>
        </property>
    </bean>
    
	<!-- 
	<bean id="validatorToolBean" class="com.basync.b2b.validation.ValidatorTool">
		<constructor-arg index="0">
			<value>true</value>
		</constructor-arg>
	</bean>
	
	<bean id="tilesConfigurer" class="com.basync.b2b.servlet.view.tiles2.SpringTilesConfigurer">  
		<property name="definitions">  
			<list>  
				<value>classpath:b2b-tiles-defs.xml</value>  
			</list>  
		</property>  
	</bean> 
	 -->
	 
</beans>
